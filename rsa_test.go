package ende_test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/yusufsyaifudin/ende"
)

const (
	PrivateKeyBase32 = `

`

	PublicKeyBase32 = `


`
)

func TestNewRSAEncrypt_Decrypt(t *testing.T) {
	plainText := "hello this will be encrypted and decrypted"

	enc, err := ende.NewRSAEncrypt(PublicKeyBase32)
	assert.NotNil(t, enc)
	assert.NoError(t, err)

	cipherText, err := enc.Encrypt(context.Background(), plainText)
	assert.NotEmpty(t, cipherText)
	assert.NoError(t, err)

	dec, err := ende.NewRSADecrypt(PrivateKeyBase32)
	assert.NotNil(t, dec)
	assert.NoError(t, err)

	plainString, err := dec.Decrypt(context.Background(), cipherText)
	assert.NotEmpty(t, plainString)
	assert.NoError(t, err)
	assert.Equal(t, plainText, plainString)
	t.Logf("CIPHER TEXT:\n%s\n", cipherText)
	t.Logf("PLAIN  TEXT:\n%s\n", plainString)
}
