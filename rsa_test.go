package ende_test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/yusufsyaifudin/ende"
)

const (
	PrivateKeyBase64 = `
LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpLQUlCQUFLQ0FnRUF3UUtTbzF3bTdOYjJJWldoQXM0UzBpSTRpS1ZqYjAwT0czTXlUOENDekkrdkxwdHIKU3l6YWlMSGtOWGdJU0lmMVZHT3RDaHFHY2tKdFhCTnZuWWczR3lVWXQ1M0N1YmU0Y1FPU0ZYaWI1enRKWktCUQpYM0hvdmRCOWhsdVg3b0xZMjZkZnJyaTF1ZVhoZG11S2xtUG1sM3NzZmFBMnNrbHF0R3cxaDJJb2RydjFzWTNwCjI0ak5EZUVVLzRBVnhSZ3pPWC9aMFRGU2hmRzVxMGxZa3NwMXZReTVyWWkwZlpOV205azRwZHdLSDdzMDB2MTAKS2kyOFVPQkU2M0liS05qTHpZa1cxM0ZuUmJzTWswN2QyVzdXSVBuWHh0ZU1jL3B3eVVSaEEyY21hUjdBRGpNWQpzZUVzM3h6VlYyMVNDVEZqeXBETnNjZmg4NExRdXRpdU5KQlplVkg0RGVydlZmVUtIeHByNkxWYXhadElqYVBPCkE5Ty9SM1pjYnVlS3JQK1M2TThWaVQ0UndlYTl4UThSeVhtYlJLdE1xYU1uSXdoczAzbTFrZ29ydkFObGE2M2gKZ0dLTGV0OEJaVWpUb3FLN2lJbDNLUXg4UDg4NWloTUFhUjUvMUhsUERaTmQ4VlFTZ3I5Z1hJUkY1K3NMRjJRNApWMUV5QVNnak5zOTlQVVpRc3cwelBwT0Y5U3FZRnc0UE01YmhtbHJsajNWRTg2ZWk1eEMwZVpyMU5Ca1g5b1JsCkZOb1o0S0hRcXBhcjlMWHh5ZGpJNEhESU1aNnJNRi94TGZMWkdadnAzTWFEQWNjWnNtYTBGU21EK3MxM0R4U2oKaXRkOHpyYWVMY1hQUDVFRXlUL3hGOEpKdFYxSFJTT1dvLzdUOTNZV2lMN2ZvMXU4MzhnZFJ0cGE2a01DQXdFQQpBUUtDQWdCYTRPVSt1Z014L1QxREx2cnpJU2pIZklsMS9ibkdERmdhSUxHTno2MUd1RmpaN3lBajgyaXFlR2hsCnJMRHB4ZXFENDdMMFVPMEJHN24yWXNocE9sd0lFZjJEWjJycW0xRGpGYlZSR3NyOW8zSzVTS3JQWmdrYVp2TFQKc29qbEt3TUUyZGc1b29zZWp0a01Neks4QVNud0pYVWJhYmFYVis1QUtidENsYnRMdk5EQTIzdERmVFJmMXAxVwplRzdIc005ZHdZOUQ2cDlhcGlpd09BYldoekhNNUJNQlhKN3ZpZEo3NjFtNjd0SnRnbTRxOG1BaUJBcnBZYy9SCnRKYUpNeHN6R2R1QmNjb1lrU3dvcURmWlMxRFRraEJCZGZpU0cxZkR6TWlKRzZhQVZKUkZtMVdEVyswTzJMcXoKUWF3ZzIvcUt4SWUxcjlINklKdzdmZzc0ZlFkRFAyQVVtVEJYZzFOVks1QmdRcWFkZnNHVStsRkNod1UyNGlSWgpUZHJ1U3RGbnpISmRWWHVManpwVFNaZzJxM1RHVFZzMkpIWmZqNzI0ZWpBS0RRK1c1Sm1iTjF3VVJoNWV3UExiCnZrUnRNdWRBTnJDdThSc0ZuNlBRME9BdnVxNnFGWnZidGZiTHdtZ0dTVzRFb1Z2TUVrZlRZSVJGSWZCVnBQZnUKWTdVR1NmSW5wbVNxb1Rlb2VaanFiYnROcFdLajhqNnZ5RDZvN0RKZWkwSFNiWlNxbDVtUGZ0emo0OVFGcXJPcQozSzhnUU5kbmZKYk5adndVcnNCSXorbTZEeW8xTlJuQzdPYXVLdnlaMnVqOUJ0UzR0SUZJSlpuME42ZUNaeFY2ClBBMk9SNHBoM1YvUHdvc0NIb1pYTXBBbE1SQzMyMjJ1VnMydnNyUDRLYUtkazVNNk1RS0NBUUVBd3Bja0g5QzMKZy9hajA5bkJXMmUyekk1WkoycENRYUkrdGlIZ2xiMlRBTkJlQmxjS3NiMmFGTjBSZlJXUERDaGRMODZIYnZ6Lwo2T3lYbUNOTnhhNHlhWHFsSHlFNDJIRFd0VFJVak9YTkpZZXFEbk95ZlZtRVJLNTd2QmMwS2RRVVZWcHYvaHBHCjRCcTVsN3BoZTMvQVc1VXhjeXpmSTQ0U2R1KzhySm05czBCemt2azdRQlVaTjAzSnhNOEJYa1U1Q3FaYVV5T3QKYkJlQ2FLMnZoc0dIa2hObVZNUmM4dkFZSzk1Q2JTVVNCVXlrMmlZOWh5RmY2VFM5WEpCcjZyVTByTWU0UndiYgpSQ1VuTlVCOFVxNERCa1Z5YWlCSmk4eUM4S29NclMrNGVkaVUrRVp6d3BwcFE3RkdzbEFKVThMZFRaaWlEeFNuCms1VUxncUJQemtlNGR3S0NBUUVBL2V2QnBZT1h3Z0ZvbWlIMWpNT05xTnJ0U2phTldsMnh5Lys1anBPQ1Q5MWkKRVh1UVFOUEdDVGFrK0VlblpBdTBBelFyaUFBWHNLdmkwTG5ldjJ5cDU1QnFtSlJZdGU5bEdpeXAyb0hHR04zRApZdFRUWUpRVmY0d1krQ1Vkcy9WVWpnZU5oZnFRTFh5QUh1OVp1eEhOZzZYVjhhVWgwSU5ka1F5T3FldVlaNk5mCnJhQmNnblhuM3FOYUJnV01VOGxSTWZZRSthaDVWRW9NRnpVVmd2NjZIVG1oNHVjUUVVN1daR0dncDg5SktjMisKSTkyYTJjYjZQSXc5QlZDVXNkZWlQVTYxZFR2NjA4VG1sakVsWklTakdTaTJrMTJvcHJ0aENoazM1YzJlTFh2TgpOaTVmYTZqMEhhRnRubTJ1UU9UK0hjS3hxN3BGWmQzV2NzTDVTUmdibFFLQ0FRRUFnUngvbjR5QTkxSkN5V0lHClpYdWZVb0p3clRKWDIreW01M242NWQvdkZlOHJNOUcxQ3RIZTFsRUlOWktFWTNDMHcrK285UDl4WFQ3K0pyZmwKOW0vcWl3b1JYV0pSc1dyTlMxWDVjN05XTnJ5WkhSV3ZMSFNreWwxclJCV3hTcitvN2lrZmZkNDVnS0M2MisyUwptTHJmQ3VVbTltQ2pmWmZhc0lmSkRFekdEWldLR2M2OGZYeUNTcXVXWUx0cEVQK2xKV2ZUTHE3UmRwTHl1RG5sCjZPZW42RWh1OFhlSXBMaWhrUm5id1VlRGVYaXRPUUYrZVphdmFMRFJwQVUvVlcvK0QxWkU4dnVkcU0xdUFtdFQKRWhqYmNPSExWSmN2dFU1dzR2WXhpd2ZLd3kzdFNmNlUrRjR6MGZKaUVoWUEyazdGUDZNeWhBY1VXVnZmVTBERApNdjlyYVFLQ0FRQVlRUkM2TXB1b1dHSVpkdXp4aVN4YTJLNlp6Q1FzWVk2K0lhc2p4MHRIUGFwRWFUMGFOQ0JTCmVQbkJEWGNidzFKcWkrMHNqSFcyMW5SUDQ3RTNMN1g2L0h4eUhwbHFwM2RNekw5Y3M5Q3NSMktHYWpYV244NTkKNUcvdUkvMTJWeFRBakZBa1lBNnRpWnJqV1pHRW9PcTBqSDZuR2xMa2krZkFGeWI1YkJ1ZXFxaFUrV0JjeGM1awpJYzVUak93ZWhMaFF3V013UmJ0eEpiR0o5ZlFjRXlETDhkbFl4eUZ0eGM0TXdKYUw4T3pZSldMb0loN01kb2tvCmgyeTh1VG02MHhJWU1SQjhKa0tMUDkrV3NSTVZTdVlaWFI0emJWclNza3RPbjZJTFBWekNrM1RDbkNOWk1VWkEKSGs5T05zUFNSdzFPNG0zK0xVaTd0ampwdFY0Q2NWOFJBb0lCQUhTQmtVblhYUmdjWnZOWXZjQTB6T3BuNTFQSApkWEZ0ekozdUFwVWRFRUM1MmdHVVFtNkNHVWU1bHUyWlZOb1BXaXh3bC9STTR5VEY1dlpJaEpHMVhtN2RGSTIxCjFQZjVrRm1uc1JSRmR5VjlqTkRHNUlhaTlEZkxWMUtHWWtEZ21wK0YxbDhJeTZRYUtNQUk4dzd0dUVReGpJVHcKU3lwc251aVJkNExEWVcwRVQzYUFIWkkvemhtcitlNjdBT2dWOEFPL0RhSEo1dXpmeFJZTHN1eHJNU3oxS25zTQovbWNPWEpaVERuTXJ4ZEptVXRYRUFZa0J3YkFzVWNQVUc4Sndod2NIa0dhYzgxMERsWk1PdVl4aU9iSVFCZ0RKCjNRNlVFNnI2TEYrTEU2RkZKbGZWNVNzOHJoSWRvd1ZIRUFlem9YeC80cjVXZXRQM2VXY1R6dkp3UzdjPQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg
`

	PublicKeyBase64 = `
LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0NnS0NBZ0VBd1FLU28xd203TmIySVpXaEFzNFMwaUk0aUtWamIwME9HM015VDhDQ3pJK3ZMcHRyU3l6YQppTEhrTlhnSVNJZjFWR090Q2hxR2NrSnRYQk52bllnM0d5VVl0NTNDdWJlNGNRT1NGWGliNXp0SlpLQlFYM0hvCnZkQjlobHVYN29MWTI2ZGZycmkxdWVYaGRtdUtsbVBtbDNzc2ZhQTJza2xxdEd3MWgySW9kcnYxc1kzcDI0ak4KRGVFVS80QVZ4Umd6T1gvWjBURlNoZkc1cTBsWWtzcDF2UXk1cllpMGZaTldtOWs0cGR3S0g3czAwdjEwS2kyOApVT0JFNjNJYktOakx6WWtXMTNGblJic01rMDdkMlc3V0lQblh4dGVNYy9wd3lVUmhBMmNtYVI3QURqTVlzZUVzCjN4elZWMjFTQ1RGanlwRE5zY2ZoODRMUXV0aXVOSkJaZVZINERlcnZWZlVLSHhwcjZMVmF4WnRJamFQT0E5Ty8KUjNaY2J1ZUtyUCtTNk04VmlUNFJ3ZWE5eFE4UnlYbWJSS3RNcWFNbkl3aHMwM20xa2dvcnZBTmxhNjNoZ0dLTApldDhCWlVqVG9xSzdpSWwzS1F4OFA4ODVpaE1BYVI1LzFIbFBEWk5kOFZRU2dyOWdYSVJGNStzTEYyUTRWMUV5CkFTZ2pOczk5UFVaUXN3MHpQcE9GOVNxWUZ3NFBNNWJobWxybGozVkU4NmVpNXhDMGVacjFOQmtYOW9SbEZOb1oKNEtIUXFwYXI5TFh4eWRqSTRIRElNWjZyTUYveExmTFpHWnZwM01hREFjY1pzbWEwRlNtRCtzMTNEeFNqaXRkOAp6cmFlTGNYUFA1RUV5VC94RjhKSnRWMUhSU09Xby83VDkzWVdpTDdmbzF1ODM4Z2RSdHBhNmtNQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo

`
)

func TestNewRSAEncrypt_Decrypt(t *testing.T) {
	plainText := "hello this will be encrypted and decrypted"

	enc, err := ende.NewRSAEncrypt(PublicKeyBase64)
	assert.NotNil(t, enc)
	assert.NoError(t, err)

	cipherText, err := enc.Encrypt(context.Background(), plainText)
	assert.NotEmpty(t, cipherText)
	assert.NoError(t, err)

	dec, err := ende.NewRSADecrypt(PrivateKeyBase64)
	assert.NotNil(t, dec)
	assert.NoError(t, err)

	plainString, err := dec.Decrypt(context.Background(), cipherText)
	assert.NotEmpty(t, plainString)
	assert.NoError(t, err)
	assert.Equal(t, plainText, plainString)
	t.Logf("%s\n", plainString)
}
